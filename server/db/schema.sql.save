-- ============================================
-- Stock Event Calendar Database Schema
-- ============================================
--
-- This schema creates a complete database for a stock event
-- calendar application with voting and per-stock customization.
--
-- Usage: psql $DATABASE_URL < server/db/schema.sql
--
-- ============================================

-- Drop existing objects (in reverse dependency order)
DROP MATERIALIZED VIEW IF EXISTS event_vote_summary CASCADE;
DROP TABLE IF EXISTS placements CASCADE;
DROP TABLE IF EXISTS votes CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TABLE IF EXISTS stocks CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- ============================================
-- TABLE: users
-- ============================================
-- Stores user accounts and authentication info
-- Note: This is a basic user table. In production, you'd
-- likely use an auth service like Clerk, Auth0, or Supabase Auth.

CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT NOT NULL UNIQUE,
  username TEXT NOT NULL UNIQUE,
  password_hash TEXT, -- NULL if using OAuth
  auth_provider TEXT DEFAULT 'local' CHECK (auth_provider IN ('local', 'google', 'github', 'apple')),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  last_login_at TIMESTAMPTZ
);

-- Indexes for users table
CREATE INDEX users_email_idx ON users(email);
CREATE INDEX users_username_idx ON users(username);
CREATE INDEX users_auth_provider_idx ON users(auth_provider);

COMMENT ON TABLE users IS 'User accounts for authentication and authorization';
COMMENT ON COLUMN users.auth_provider IS 'Authentication provider: local (email/password) or OAuth provider';


-- ============================================
-- TABLE: stocks
-- ============================================
-- Stores ticker symbols for stocks, crypto, ETFs, and indexes

CREATE TABLE stocks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  ticker TEXT NOT NULL UNIQUE,
  name TEXT NOT NULL,
  type TEXT NOT NULL CHECK (type IN ('stock', 'crypto', 'etf', 'index')),
  sector TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Indexes for stocks table
CREATE INDEX stocks_ticker_idx ON stocks(ticker);
CREATE INDEX stocks_type_idx ON stocks(type);
CREATE INDEX stocks_sector_idx ON stocks(sector);
CREATE INDEX stocks_ticker_trgm_idx ON stocks USING gin(ticker gin_trgm_ops);
CREATE INDEX stocks_name_trgm_idx ON stocks USING gin(name gin_trgm_ops);

COMMENT ON TABLE stocks IS 'Ticker symbols and metadata for stocks, crypto, ETFs, and indexes';
COMMENT ON COLUMN stocks.type IS 'Asset type: stock, crypto, etf, or index';
COMMENT ON INDEX stocks_ticker_trgm_idx IS 'Trigram index for fuzzy search on ticker symbols';
COMMENT ON INDEX stocks_name_trgm_idx IS 'Trigram index for fuzzy search on company names';


-- ============================================
-- TABLE: events
-- ============================================
-- Stores calendar events (earnings, economic data, Fed meetings, etc.)

CREATE TABLE events (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  event_date TIMESTAMPTZ NOT NULL,
  category TEXT NOT NULL CHECK (category IN (
    'earnings',
    'economic_data',
    'fed_policy',
    'gov_policy',
    'regulatory',
    'corporate_action',
    'macro_event'
  )),
  impact_scope TEXT NOT NULL CHECK (impact_scope IN (
    'single_stock',
    'sector',
    'market'
  )),
  primary_ticker TEXT,
  affected_tickers TEXT[] NOT NULL DEFAULT '{}',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

  -- Foreign key to stocks (if primary_ticker is set)
  CONSTRAINT fk_events_primary_ticker
    FOREIGN KEY (primary_ticker)
    REFERENCES stocks(ticker)
    ON DELETE SET NULL
);

-- Indexes for events table
CREATE INDEX events_event_date_idx ON events(event_date);
CREATE INDEX events_category_idx ON events(category);
CREATE INDEX events_impact_scope_idx ON events(impact_scope);
CREATE INDEX events_primary_ticker_idx ON events(primary_ticker);
CREATE INDEX events_affected_tickers_idx ON events USING gin(affected_tickers);
CREATE INDEX events_date_category_idx ON events(event_date, category);
CREATE INDEX events_date_scope_idx ON events(event_date, impact_scope);

COMMENT ON TABLE events IS 'Calendar events including earnings, economic data, Fed meetings, etc.';
COMMENT ON COLUMN events.category IS 'Event category: earnings, economic_data, fed_policy, gov_policy, regulatory, corporate_action, macro_event';
COMMENT ON COLUMN events.impact_scope IS 'Impact scope: single_stock, sector, or market-wide';
COMMENT ON COLUMN events.primary_ticker IS 'Primary ticker symbol affected (NULL for market-wide events)';
COMMENT ON COLUMN events.affected_tickers IS 'Array of all ticker symbols affected by this event';


-- ============================================
-- TABLE: votes
-- ============================================
-- Stores user votes on events (yes/no/no_comment)

CREATE TABLE votes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  event_id UUID NOT NULL REFERENCES events(id) ON DELETE CASCADE,
  vote TEXT NOT NULL CHECK (vote IN ('yes', 'no', 'no_comment')),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

  -- Unique constraint: one vote per user per event
  CONSTRAINT unique_user_event_vote UNIQUE (user_id, event_id)
);

-- Indexes for votes table
CREATE INDEX votes_user_id_idx ON votes(user_id);
CREATE INDEX votes_event_id_idx ON votes(event_id);
CREATE INDEX votes_user_event_idx ON votes(user_id, event_id);
CREATE INDEX votes_event_vote_idx ON votes(event_id, vote);

COMMENT ON TABLE votes IS 'User votes on calendar events';
COMMENT ON COLUMN votes.vote IS 'Vote value: yes (bullish), no (bearish), or no_comment (neutral)';
COMMENT ON CONSTRAINT unique_user_event_vote ON votes IS 'Ensures one vote per user per event';


-- ============================================
-- TABLE: placements (user_calendar_events)
-- ============================================
-- Stores user-customized event placements on their calendar
-- Allows users to move events to different dates and create
-- per-stock calendar views (e.g., AAPL calendar vs TSLA calendar)

CREATE TABLE placements (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  event_id UUID NOT NULL REFERENCES events(id) ON DELETE CASCADE,
  date TEXT NOT NULL, -- ISO date string 'yyyy-MM-dd'
  stock_ticker TEXT, -- Optional: NULL for global calendar, or ticker for per-stock view
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),

  -- Foreign key to stocks (if stock_ticker is set)
  CONSTRAINT fk_placements_stock_ticker
    FOREIGN KEY (stock_ticker)
    REFERENCES stocks(ticker)
    ON DELETE CASCADE,

  -- Unique constraint: prevent duplicate placements
  CONSTRAINT unique_user_event_date_stock
    UNIQUE (user_id, event_id, date, stock_ticker),

  -- Check constraint: date must be valid ISO format
  CONSTRAINT valid_date_format
    CHECK (date ~ '^\d{4}-\d{2}-\d{2}$')
);

-- Indexes for placements table
CREATE INDEX placements_user_id_idx ON placements(user_id);
CREATE INDEX placements_event_id_idx ON placements(event_id);
CREATE INDEX placements_date_idx ON placements(date);
CREATE INDEX placements_stock_ticker_idx ON placements(stock_ticker);
CREATE INDEX placements_user_date_idx ON placements(user_id, date);
CREATE INDEX placements_user_event_date_idx ON placements(user_id, event_id, date);
CREATE INDEX placements_user_stock_date_idx ON placements(user_id, stock_ticker, date);
CREATE INDEX placements_user_stock_event_idx ON placements(user_id, stock_ticker, event_id);

COMMENT ON TABLE placements IS 'User-customized event placements with per-stock calendar support';
COMMENT ON COLUMN placements.date IS 'Target date in ISO format (yyyy-MM-dd)';
COMMENT ON COLUMN placements.stock_ticker IS 'Optional ticker for per-stock calendar views (NULL = global calendar)';
COMMENT ON CONSTRAINT unique_user_event_date_stock ON placements IS 'Prevents duplicate event placements';


-- ============================================
-- MATERIALIZED VIEW: event_vote_summary
-- ============================================
-- Pre-aggregated vote counts and percentages for each event
-- This improves query performance when displaying events with vote stats

CREATE MATERIALIZED VIEW event_vote_summary AS
SELECT
  e.id AS event_id,
  e.title,
  e.event_date,
  e.category,
  e.impact_scope,
  e.primary_ticker,
  COUNT(v.id) AS total_votes,
  COUNT(v.id) FILTER (WHERE v.vote = 'yes') AS yes_votes,
  COUNT(v.id) FILTER (WHERE v.vote = 'no') AS no_votes,
  COUNT(v.id) FILTER (WHERE v.vote = 'no_comment') AS no_comment_votes,
  CASE
    WHEN COUNT(v.id) > 0 THEN
      ROUND(100.0 * COUNT(v.id) FILTER (WHERE v.vote = 'yes') / COUNT(v.id), 1)
    ELSE 0
  END AS yes_percentage,
  CASE
    WHEN COUNT(v.id) > 0 THEN
      ROUND(100.0 * COUNT(v.id) FILTER (WHERE v.vote = 'no') / COUNT(v.id), 1)
    ELSE 0
  END AS no_percentage,
  CASE
    WHEN COUNT(v.id) > 0 THEN
      ROUND(100.0 * COUNT(v.id) FILTER (WHERE v.vote = 'no_comment') / COUNT(v.id), 1)
    ELSE 0
  END AS no_comment_percentage
FROM events e
LEFT JOIN votes v ON e.id = v.event_id
GROUP BY e.id, e.title, e.event_date, e.category, e.impact_scope, e.primary_ticker;

-- Index for materialized view
CREATE UNIQUE INDEX event_vote_summary_event_id_idx ON event_vote_summary(event_id);
CREATE INDEX event_vote_summary_event_date_idx ON event_vote_summary(event_date);
CREATE INDEX event_vote_summary_category_idx ON event_vote_summary(category);

COMMENT ON MATERIALIZED VIEW event_vote_summary IS 'Pre-aggregated vote statistics for events (refresh periodically)';
COMMENT ON COLUMN event_vote_summary.total_votes IS 'Total number of votes for this event';
COMMENT ON COLUMN event_vote_summary.yes_percentage IS 'Percentage of yes votes (bullish sentiment)';
COMMENT ON COLUMN event_vote_summary.no_percentage IS 'Percentage of no votes (bearish sentiment)';


-- ============================================
-- FUNCTIONS & TRIGGERS
-- ============================================

-- Function to refresh the materialized view
CREATE OR REPLACE FUNCTION refresh_event_vote_summary()
RETURNS void
LANGUAGE plpgsql
AS $$
BEGIN
  REFRESH MATERIALIZED VIEW CONCURRENTLY event_vote_summary;
END;
$$;

COMMENT ON FUNCTION refresh_event_vote_summary IS 'Refreshes the event_vote_summary materialized view (call after vote changes)';


-- Trigger function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply updated_at trigger to relevant tables
CREATE TRIGGER update_users_updated_at
  BEFORE UPDATE ON users
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_events_updated_at
  BEFORE UPDATE ON events
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_votes_updated_at
  BEFORE UPDATE ON votes
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();


-- ============================================
-- ENABLE EXTENSIONS
-- ============================================
-- Enable pg_trgm for fuzzy search on stock tickers and names

CREATE EXTENSION IF NOT EXISTS pg_trgm;

COMMENT ON EXTENSION pg_trgm IS 'Trigram matching for fuzzy text search';


-- ============================================
-- SAMPLE DATA (Optional - remove if not needed)
-- ============================================

-- Insert sample user
INSERT INTO users (email, username, password_hash, auth_provider) VALUES
  ('demo@example.com', 'demo_user', NULL, 'local')
ON CONFLICT (email) DO NOTHING;

-- Success message
DO $$
BEGIN
  RAISE NOTICE '✅ Schema created successfully!';
  RAISE NOTICE '';
  RAISE NOTICE '📊 Tables created:';
  RAISE NOTICE '  - users (authentication)';
  RAISE NOTICE '  - stocks (ticker symbols)';
  RAISE NOTICE '  - events (calendar events)';
  RAISE NOTICE '  - votes (user votes on events)';
  RAISE NOTICE '  - placements (user calendar customization)';
  RAISE NOTICE '';
  RAISE NOTICE '📈 Materialized view:';
  RAISE NOTICE '  - event_vote_summary (aggregated vote stats)';
  RAISE NOTICE '';
  RAISE NOTICE '🔍 Next steps:';
  RAISE NOTICE '  1. Run seed scripts to populate stocks and events';
  RAISE NOTICE '  2. Refresh materialized view: SELECT refresh_event_vote_summary();';
  RAISE NOTICE '  3. Test queries against the schema';
END $$;
